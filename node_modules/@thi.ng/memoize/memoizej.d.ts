import type { FnAny, IObjectOf } from "@thi.ng/api";
/**
 * Function memoization for arbitrary argument counts. Returns augmented
 * function, which uses `JSON.stringify()` to obtain (and store)
 * memoized result for given args. Supports generics for up to 4 args
 * (otherwise untyped).
 *
 * @remarks
 * **Important:** If the given args cannot be stringified, the user
 * function will ALWAYS be called (without caching result).
 *
 * Also see {@link memoize}, {@link memoize1}, {@link memoizeO}.
 *
 * @param fn -
 * @param cache -
 */
export declare function memoizeJ<T extends FnAny<any>>(fn: T, cache?: IObjectOf<any>): T;
/**
 * Async version of {@link memoizeJ}.
 *
 * @param fn
 * @param cache
 */
export declare function memoizeAsyncJ<T extends FnAny<any>>(fn: T, cache?: IObjectOf<any>): (...xs: Parameters<T>) => Promise<Awaited<ReturnType<T>>>;
//# sourceMappingURL=memoizej.d.ts.map