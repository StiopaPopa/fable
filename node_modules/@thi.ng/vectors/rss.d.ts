import type { FnN } from "@thi.ng/api";
import type { ReadonlyVec } from "./api.js";
/**
 * Computes the residual sum of squares (aka sum of squared errors) between
 * observed and predicted values (each set given as vector).
 *
 * @remarks
 * Reference: https://en.wikipedia.org/wiki/Residual_sum_of_squares
 *
 * @param a
 * @param b
 */
export declare const rss: (a: ReadonlyVec, b: ReadonlyVec) => number;
/**
 * Computes the residual sum of squares (aka sum of squared errors), given
 * related data sets `x` (domain) and `y` (range) and a `model` function for
 * obtaining predictions (will be evaluated for all values in `x`).
 *
 * @remarks
 * Reference: https://en.wikipedia.org/wiki/Residual_sum_of_squares
 *
 * @param x
 * @param y
 * @param model
 */
export declare const rssModel: (x: ReadonlyVec, y: ReadonlyVec, model: FnN) => number;
/**
 * Computes the residual sum of squares (aka sum of squared errors), given
 * related data sets `x` (domain) and `y` (range) and predicted line parameters
 * `y0` (y-intercept) and `slope`.
 *
 * @remarks
 * Reference: https://en.wikipedia.org/wiki/Residual_sum_of_squares
 *
 * @param x
 * @param y
 * @param y0
 * @param slope
 */
export declare const rssLine: (x: ReadonlyVec, y: ReadonlyVec, y0: number, slope: number) => number;
//# sourceMappingURL=rss.d.ts.map